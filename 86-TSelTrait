/** @file TSelectionTrait.cpp
*
*/

#include "tselectiontrait.h"
#include "tselectiontype.h"
#include "tselection.h"
#include "ttquanti.h"
#include "patch.h"
// ----------------------------------------------------------------------------------------
// constructor
// ----------------------------------------------------------------------------------------
TSelectionTrait::TSelectionTrait() : func_ptr_get_meanVe(0), func_ptr_get_sdVe(0)
{
  _selection_pressure[FEM] = NULL;
  _selection_pressure[MAL] = NULL;
  _selection_sd            = NULL;
  _nb_selection_params = 0;
}

// ----------------------------------------------------------------------------------------
// init
// ----------------------------------------------------------------------------------------
void
TSelectionTrait::init(TSelection* s, const int& trait)
{
  _pSel         = s;
  _popPtr       = _pSel->get_popPtr();
  _quantiIndex  = trait;
  _traitIndex   = _pSel->get_vTraits(trait);
  _pQuantiProto = dynamic_cast <TTQuantiProto*> (&_popPtr->getTraitPrototype(_traitIndex));

  // get parameters from quantiProto
  _Ve_prop      = _pQuantiProto->get_parameter("quanti_environmental_proportion"+_pQuantiProto->get_trait_indexStr_())->get_value();
  _Ve_model     = (int)_pQuantiProto->get_parameter("quanti_environmental_model"+_pQuantiProto->get_trait_indexStr_())->get_value();

	// is there any fitness factor set?
	if(_pQuantiProto->fitnessFactor_used()) func_ptr_set_phenotype = &TSelectionDirectional::set_phenotype_and_fitness_factor;
	else                                    func_ptr_set_phenotype = &TSelectionDirectional::set_phenotype;
}



// ----------------------------------------------------------------------------------------
// set_ve_mean_func_ptr
//-----------------------------------------------------------------------------------------
void
TSelectionTrait::set_ve_mean_func_ptr()
{
  // is there a constant effect of the environment?
  if(_pSel->get_Ve_mean_set()){
		if(_Ve_prop == 1)      func_ptr_get_meanVe = &TSelectionTrait::_get_meanVe_current;
    else if(_Ve_prop == 0) func_ptr_get_meanVe = &TSelectionTrait::_get_meanVe_natal;
    else                   func_ptr_get_meanVe = &TSelectionTrait::_get_meanVe_mix;
  }
  else                     func_ptr_get_meanVe = &TSelectionTrait::_get_null;   // there is no constant effect
}

// ----------------------------------------------------------------------------------------
// _get_sel_pressure
// ----------------------------------------------------------------------------------------
void
TSelectionTrait::set_quantiHeritability(){
  if(_pSel->get_Ve_var_set()) return;

  Param* pParam = _pQuantiProto->get_parameter("quanti_heritability"+_pQuantiProto->get_trait_indexStr_());
  unsigned int nbPatch = _popPtr->getPatchNbr();
  if(pParam->is_matrix()){
    TMatrix* m = pParam->get_matrix();
    unsigned int count_patch = m->get_dims(NULL);

    // check the number of h2 per number of patches
    if(count_patch>nbPatch) warning("There are more heritabilities specified than patches! Only a part of the heritabilities is considered!\n");
    else if(nbPatch % count_patch) warning("The number of heritabilities is not a entire subset of the number of patches!\n");

    // set the h2 for each patch
    for(unsigned int p = 0; p < nbPatch; ++p) {
      _popPtr->getPatchPtr(p)->set_h2(p % count_patch, _quantiIndex);
    }
  }
  else{         // a single value
    double val = pParam->get_value();
    for(unsigned int p = 0; p < nbPatch; ++p) {
      _popPtr->getPatchPtr(p)->set_h2(val, _quantiIndex);
    }
  }
}

// ----------------------------------------------------------------------------------------
// _get_sel_pressure
// ----------------------------------------------------------------------------------------
double
TSelectionTrait::_get_selection_pressure_var(double value, const int& i){
 return SimRunner::r.Normal(value, _selection_sd[i]);
}

double
TSelectionTrait::_get_selection_pressure_const(double value, const int& i){
  return value;
}

//-----------------------------------------------------------------------------
// _get_Ve
//-----------------------------------------------------------------------------
/** returns the environmental variance according to the selected proportion
  * between the Ve of the natal patch and the one of the mating patch.
  * _Ve_prop is the proportion of the current patch
  */
//-----------------------------------------------------------------------------
double TSelectionTrait::_get_meanVe_natal(){
  return _curInd->getNatalPatch()->get_meanVe(_curInd->getSex(),_quantiIndex);
}

double TSelectionTrait::_get_meanVe_current(){
  return _curInd->getCurrentPatch()->get_meanVe(_curInd->getSex(), _quantiIndex);
}

double TSelectionTrait::_get_meanVe_mix(){
  return ((1-_Ve_prop) * _curInd->getNatalPatch()->get_meanVe(_curInd->getSex(), _quantiIndex)      // Ve of natal patch
          + _Ve_prop   * _curInd->getCurrentPatch()->get_meanVe(_curInd->getSex(), _quantiIndex));  // Ve of current patch
}

//-----------------------------------------------------------------------------
double TSelectionTrait::_get_sdVe_natal(){
  return _curInd->getNatalPatch()->get_sdVe(_curInd->getSex(), _quantiIndex);
}

double TSelectionTrait::_get_sdVe_current(){
  return _curInd->getCurrentPatch()->get_sdVe(_curInd->getSex(), _quantiIndex);
}

double TSelectionTrait::_get_sdVe_mix(){
  return ((1-_Ve_prop) * _curInd->getNatalPatch()->get_sdVe(_curInd->getSex(), _quantiIndex)      // Ve of natal patch
          + _Ve_prop   * _curInd->getCurrentPatch()->get_sdVe(_curInd->getSex(), _quantiIndex));  // Ve of current patch
}

//-----------------------------------------------------------------------------
// set_phenotype
//-----------------------------------------------------------------------------
/** sets the phenotype of each trait of the individuum taking into account Va, Vd, Vep and Ve */
void
TSelectionTrait::set_phenotype(Individual* ind)
{
	_curInd = ind;

	if(_curInd->getTraitPhenotype(_traitIndex) == my_NAN){	// if phenotype is not yet set
		// v=Normal(0, sqrt(Ve))
		double sd = (this->*func_ptr_get_sdVe)();
		if(sd) sd *= SimRunner::r.Normal();
		_curInd->setTraitValue(_traitIndex, sd+(this->*func_ptr_get_meanVe)());  // P = G + Normal()
  }
}

//-----------------------------------------------------------------------------
// set_phenotype_and_fitness_factor
//-----------------------------------------------------------------------------
/** sets the phenotype of each trait of the individuum taking into account Va, Vd, Vep and Ve */
void
TSelectionTrait::set_phenotype_and_fitness_factor(Individual* ind)
{
	_curInd = ind;

	if(_curInd->getTraitPhenotype(_traitIndex) == my_NAN){	// if phenotype is not yet set
		// v=Normal(0, sqrt(Ve))
		double sd = (this->*func_ptr_get_sdVe)();
		if(sd) sd *= SimRunner::r.Normal();
		_curInd->setTraitValue(_traitIndex, sd+(this->*func_ptr_get_meanVe)());  // P = G + Normal()
	}

	_curInd->setFitnessFactor(_traitIndex);
}

//-----------------------------------------------------------------------------
// set_phenotype_with_corr
//-----------------------------------------------------------------------------

void
TSelectionTrait::get_selection_pressure(Patch* patch, sex_t SEX)
{
  _curPatch = patch;
  _curSex = SEX;
  for(int i = 0; i< _nb_selection_params; ++i){
    _selection_pressure[_curSex][i]
              = (this->*_get_selection_pressure_func_ptr[i])(patch->get_localSelection(SEX,_quantiIndex,i),i);
  }
}

//-----------------------------------------------------------------------------
// get_phenotype
//-----------------------------------------------------------------------------
double
TSelectionTrait::get_phenotype(){
	return _curInd->getTraitValue(_traitIndex);
}

//-----------------------------------------------------------------------------
// get_fitnessFactor
//-----------------------------------------------------------------------------
double
TSelectionTrait::get_fitnessFactor_individual(){
	return _curInd->getFitnessFactor(_traitIndex);
}

//-----------------------------------------------------------------------------
// set_Ve
//-----------------------------------------------------------------------------
/** set the environmental variance for each patch
  * and set the pointer accordingly
  */
void
TSelectionTrait::set_Ve(){
  unsigned int Ve_used = 0;
  for(unsigned int p = 0; p < _popPtr->getPatchNbr(); ++p){
    Ve_used |= _popPtr->getPatch(p)->set_Ve(_Ve_model, _quantiIndex, FEM);
    if(_popPtr->get_sexInitRatio()) Ve_used |= _popPtr->getPatch(p)->set_Ve(_Ve_model, _quantiIndex, MAL);
  }
  if(Ve_used){ 
		if(_Ve_prop == 1)      func_ptr_get_sdVe = &TSelectionTrait::_get_sdVe_current;
		else if(_Ve_prop == 0) func_ptr_get_sdVe = &TSelectionTrait::_get_sdVe_natal;
		else                   func_ptr_get_sdVe = &TSelectionTrait::_get_sdVe_mix;
  }
	else                     func_ptr_get_sdVe = &TSelectionTrait::_get_null;
}




