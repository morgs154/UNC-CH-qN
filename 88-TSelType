/** @file tselectionneutral.cpp
*
*/


#include "tselectiontype.h"
#include "tselection.h"
#include "ttquanti.h"

// ----------------------------------------------------------------------------------------
// ini_neutral_selection
// ----------------------------------------------------------------------------------------
/** set the selection optima and intensity of the patches */
void
TSelectionNeutral::init()
{
	_nb_selection_params = 0;

	if(_pQuantiProto->fitnessFactor_used()) _func_ptr_get_fitness = &TSelectionNeutral::get_fitnessFactor;
	else                                    _func_ptr_get_fitness = &TSelectionNeutral::get_fitness_none;
}

// ----------------------------------------------------------------------------------------
// ini_stabilizing_selection
// ----------------------------------------------------------------------------------------
/** set the selection optima and intensity of the patches */
void
TSelectionStabilizing::init()
{
  _nb_selection_params = 2;
  _selection_pressure[FEM] = new double[_nb_selection_params];
  _selection_pressure[MAL] = new double[_nb_selection_params];
  _selection_sd            = new double[_nb_selection_params];

	// get the selection variance
	_selection_sd[0] = _pSel->get_optima_sd();           // does the optima varies from generation to generation?
	_selection_sd[1] = _pSel->get_intensity_sd();        // does the intensity varies from generation to generation?

	// set the correct function pointer
	for(int i=0; i<_nb_selection_params; ++i){
		if(_selection_sd[i]) _get_selection_pressure_func_ptr[i] = &TSelectionTrait::_get_selection_pressure_var;
		else                 _get_selection_pressure_func_ptr[i] = &TSelectionTrait::_get_selection_pressure_const;
	}

	// is there any fitness factor set?
	if(_pQuantiProto->fitnessFactor_used()) _func_ptr_get_fitness = &TSelectionStabilizing::get_fitnessFactor;
	else                                    _func_ptr_get_fitness = &TSelectionStabilizing::get_fitness_none;
}

// ----------------------------------------------------------------------------------------
// ini_directional_selection
// ----------------------------------------------------------------------------------------
void
TSelectionDirectional::init()
{
  _nb_selection_params = 5;
	_selection_pressure[FEM] = new double[_nb_selection_params];
	_selection_pressure[MAL] = new double[_nb_selection_params];
  _selection_sd            = new double[_nb_selection_params];

	// get the selection variance
	_selection_sd[0] = _pSel->get_min_sd();           // does the lower asymptote varies from generation to generation?
	_selection_sd[1] = _pSel->get_max_sd();           // does the upper asymptote varies from generation to generation?
	_selection_sd[2] = _pSel->get_max_growth_sd();    // does the maximal growth varies from generation to generation?
	_selection_sd[3] = _pSel->get_growth_rate_sd(); 	// does the growth rate varies from generation to generation?
	_selection_sd[4] = _pSel->get_symmetry_sd();      // does the symmetry varies from generation to generation?

	// set the correct function pointer
	for(int i=0; i<_nb_selection_params; ++i){
		if(_selection_sd[i]) _get_selection_pressure_func_ptr[i] = &TSelectionTrait::_get_selection_pressure_var;
		else                 _get_selection_pressure_func_ptr[i] = &TSelectionTrait::_get_selection_pressure_const;
	}

	// is there any fitness factor set?
	if(_pQuantiProto->fitnessFactor_used()) _func_ptr_get_fitness = &TSelectionDirectional::get_fitnessFactor;
	else                                    _func_ptr_get_fitness = &TSelectionDirectional::get_fitness_none;
}

//-----------------------------------------------------------------------------
// _get_fitness_neutral
//-----------------------------------------------------------------------------
/** if no selection acts we return a fitness of 1 (function should never be called) */
double
TSelectionNeutral::get_fitness_none()
{
 return 1;
}

//-----------------------------------------------------------------------------
// get_fitnessFactor:
//-----------------------------------------------------------------------------
double
TSelectionNeutral::get_fitnessFactor()
{
	return get_fitness_none() * get_fitnessFactor_individual();
}

//-----------------------------------------------------------------------------
// get_fitness_stabilizing:
//-----------------------------------------------------------------------------
/** standard stabilizing function
  * w = exp(-[(vp-optima)/omega]^2 / 2))
  * intensity is the sd
  * special is the weight when multiple tratis are used
  */
double
TSelectionStabilizing::get_fitness_none()
{
  double value = (get_phenotype()-_selection_pressure[_curSex][0])/_selection_pressure[_curSex][1];
  value *= value;
  return exp(value/(-2));
}

//-----------------------------------------------------------------------------
// get_fitness:
//-----------------------------------------------------------------------------
double
TSelectionStabilizing::get_fitnessFactor()
{
	return get_fitness_none() * get_fitnessFactor_individual();
}

//-----------------------------------------------------------------------------
// get_fitness_directionl
//-----------------------------------------------------------------------------
/** directional selection with a general logistic curve.
	*   A: the lower asymptote;
  *   C: the upper asymptote;
	*   M: the time of maximum growth;
  *   B: the growth rate;
  *   T: affects near which asymptote maximum growth occurs.
  */
double
TSelectionDirectional::get_fitness_none()
{
	return generalLogisticCurve(get_phenotype(),
															_selection_pressure[_curSex][0],  // min
															_selection_pressure[_curSex][1],  // max
															_selection_pressure[_curSex][2],  // max growth
															_selection_pressure[_curSex][3],  // growth rate
															_selection_pressure[_curSex][4]); // symmetry
}

//-----------------------------------------------------------------------------
// get_fitness:
//-----------------------------------------------------------------------------
double
TSelectionDirectional::get_fitnessFactor()
{
	return get_fitness_none() * get_fitnessFactor_individual();
}
//-----------------------------------------------------------------------------

