/** @file service.h
*
*   
*/

#ifndef serviceH
#define serviceH

#include <list>
#include "handler.h"
#include "output.h"
using namespace std;


class SimComponent;

/**Interface for the simulation services (files and stats).
 * Implements the observer pattern. Notify the observers (Handler) to update their state.
 * Contains the observer list. Provides interface to attach the observers to the service.
**/
class Service {
private:
	/**The list of observers. */
  list<Handler*> _observers;

public:

  Service( ) { }

  virtual ~Service( ) { }

  /**Inits internals. */
  virtual bool init ( ) = 0;

  /**Notifies all observers to update their state. */
	virtual void notify ( ) {
		#ifdef _DEBUG
      message(" %i ... ",_observers.size());
		#endif

		list< Handler* >::iterator HIT = _observers.begin();
		while(HIT != _observers.end()) {
			(*HIT)->update();
	    HIT++;
	  }
	}

	virtual list<Handler*>* get_observers( ){return &_observers;}
	
  /**Interface to used by a simulation component to load its obervers onto a service provider.*/
  virtual void load ( SimComponent* sc ) = 0;

	/**Adds an observer to the list. */
  virtual void attach ( Handler* h ) {
    _observers.push_back(h);
  }

  /**Clears the observers list. */
  virtual void reset ( ) {
    _observers.clear();
  }

};

#endif //SERVICE_H
