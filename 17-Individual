/** @file individual.cpp
*
*/


#include "individual.h"
#include "ttrait.h"
#include "output.h"
#include "patch.h"
#include "lce_breed.h"


// ----------------------------------------------------------------------------------------
// individual
// ----------------------------------------------------------------------------------------
Individual::Individual ( )
: _sex(MAL),_mother(NULL),_father(NULL),
  _natalPatch(NULL),_currentPatch(NULL),
  _isSelfed(false),_fecundity(0),_trait_nb(0)
{
  _matings[0] = _matings[1] = 0;
  _realizedFecundity[0] = _realizedFecundity[1] = 0;
}

// ----------------------------------------------------------------------------------------
// init
// ----------------------------------------------------------------------------------------
Individual * Individual::init ()
{
	_isSelfed = false;
  _mother = NULL;
	_father = NULL;
	_natalPatch = NULL;
	_currentPatch = NULL;
	_matings[0] = _matings[1] = 0;
  _realizedFecundity[0] = _realizedFecundity[1] = 0;
  _fitness = my_NAN;

  if(_trait_nb != Traits.size()){
    error("Individual::init: trait counter and table size differ, resetting\n");
    _trait_nb = Traits.size();
  }
  for(unsigned int i = 0; i < _trait_nb; i++){
		Traits[i]->init();
  }

  return this;
}
// ----------------------------------------------------------------------------------------
// reset
// ----------------------------------------------------------------------------------------
void Individual::reset ()
{
  _id.clear();
  _sex = MAL;
  _isSelfed = false;
  _mother = NULL;
  _father = NULL;
  _natalPatch = NULL;
  _currentPatch = NULL;
  _matings[0] = _matings[1] = 0;
  _realizedFecundity[0] = _realizedFecundity[1] = 0;
  _fitness = my_NAN;

  if(_trait_nb != Traits.size()){
    error("Individual::reset: trait counter and table size differ, resetting\n");
    _trait_nb = Traits.size();
  }

  reset_traits();
}

// ----------------------------------------------------------------------------------------
// reset_traits
// ----------------------------------------------------------------------------------------
void Individual::reset_traits ()
{
  for(unsigned int i = 0; i < _trait_nb; i++){
    Traits[i]->reset();
  }
}

// ----------------------------------------------------------------------------------------
// switch_sex
// ----------------------------------------------------------------------------------------
/** change the sex of the individual.
  * The individual itself does not know its age, not its current index in the container ...
  */
void Individual::switch_sex (age_idx AGE, const int& i){
  if(this->_sex == MAL){    // it is a male
    _sex = FEM;                           // change sex
    _currentPatch->add(FEM, AGE, this);   // add individual to the female container
    _currentPatch->remove(MAL, AGE, i);   // remove individual from the male container
  }
  else{                     // it is a female
    _sex = MAL;                           // change sex
    _currentPatch->add(MAL, AGE, this);   // add individual to the male container
    _currentPatch->remove(FEM, AGE, i);   // remove individual from the female container
  }
}

// ----------------------------------------------------------------------------------------
// show_up
// ----------------------------------------------------------------------------------------
void Individual::show_up ()
{
  message("\nIndividual ID: %s\n\
          sex: %i\n\
       mother: %s\n\
       father: %s\n\
  natal patch: %i\n\
current patch: %i\n\
        traits values: \n",_id.c_str(),_sex,_motherID.c_str(),_fatherID.c_str(),_natalPatch->get_ID(),_currentPatch->get_ID());

  for(unsigned int i = 0; i < _trait_nb; i++){
    Traits[i]->show_up();
  }
}
// ----------------------------------------------------------------------------------------
// clone
// ----------------------------------------------------------------------------------------
Individual* Individual::clone ()
{
  Individual* myClone = new Individual();

  for(unsigned int i = 0; i < _trait_nb; i++){
    myClone->addTrait(Traits[i]->clone(), i);
  }

  return myClone;
}

// ----------------------------------------------------------------------------------------
// inherit
// ----------------------------------------------------------------------------------------
/**Calls the inheritance procedure of all the traits present in the individual.
  * @param mother the mother
  * @param father the father
  **/
void
Individual::inherit (Individual* mother, Individual* father){
  recombine();  // make a recombination if the genetic map exists
  for(unsigned int i = 0; i < _trait_nb; i++){
    Traits[i]->inherit(mother->getTrait(i), father->getTrait(i));
  }
}

// ----------------------------------------------------------------------------------------
// operator=
// ----------------------------------------------------------------------------------------
Individual& Individual::operator=(const Individual& i)
{
  if(this != &i) {

    if(Traits.size() != i.Traits.size()) fatal("Individual::operator=:not same number of traits in left and right sides of assignment\n");
    if(_trait_nb != i._trait_nb) {
      error("Individual::operator=:trait counters differ, restting\n");
      _trait_nb = i._trait_nb;
    }
    _sex                  = i._sex;
    _mother               = i._mother;
    _father               = i._father;
    _natalPatch           = i._natalPatch;
    _currentPatch         = i._currentPatch;
    _isSelfed             = i._isSelfed;
    _fecundity            = i._fecundity;
    _matings[0]           = i._matings[0];
    _matings[1]           = i._matings[1];
    _realizedFecundity[0] = i._realizedFecundity[0];
    _realizedFecundity[1] = i._realizedFecundity[1];

    for(unsigned int t = 0; t < _trait_nb; t++){
      if(Traits[t]->pTraitProto->get_type() != i.Traits[t]->pTraitProto->get_type()){
        fatal("Individual::operator=: not same kinds of traits in left and right sides of assignment\n");
      }
      (*Traits[t]) = (*i.Traits[t]);
    }
  }
  return *this;
}
// ----------------------------------------------------------------------------------------
// operator==
// ----------------------------------------------------------------------------------------
bool Individual::operator==(const Individual& i)
{
  if(this != &i) {
    if(Traits.size() != i.Traits.size()) return false;

    for(unsigned int t = 0; t < Traits.size(); t++){
      if((*Traits[t]) != (*i.Traits[t])) return false;
    }
  }
  return true;
}

// ----------------------------------------------------------------------------------------
// operator!=
// ----------------------------------------------------------------------------------------
bool Individual::operator!=(const Individual& i)
{
  if(!((*this) == i)) return true;
  return false;
}

